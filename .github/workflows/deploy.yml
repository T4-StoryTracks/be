name: Deploy to EC2

on:
  push:
    branches:
      - main  # main 브랜치에 푸쉬될 때만 실행

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 저장소 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Java 17 설정
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'  # OpenJDK의 Temurin 배포판
          java-version: '17'

      # 3. Gradle 캐시 설정
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. Gradle 빌드
      - name: Build with Gradle
        run: ./gradlew bootJar

      # 5. Gradle 빌드 결과 확인
      - name: Verify build artifacts
        run: ls build/libs/

      # 6. EC2로 파일 전송
      #- uses: actions/checkout@v4
      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: '22'
          source: build/libs/*.jar
          target: ~/

      # 7. EC2에서 애플리케이션 실행
      # script에 pkill -f 'java -jar' || true 는 삭제
      - name: Run app on EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: '22'
          script: |
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
            nohup java -jar ~/build/libs/storyTracks-0.0.1-SNAPSHOT.jar > ~/app.log 2>&1 &